function run(){
	var svg=d3.select("svg");
	var data = [
	{x: 100, y: 194},
      {x:  80, y: 184},
      {x: 130, y: 74},
      {x:  90, y: 87}
	];

	var circles=svg.selectAll("circle")
		.data(data)
		.attr("cx",function(d) { return d.x ;} )
		.attr("cy",function(d){return  d.y ;})
		//.attr("width",function(d,i){ return d ;})
		//.attr("height" , 20)
		.style("fill",function(d){
			if(d.x<="81")
				return "green";
			if(d.x >="81"  && d.x<="91")
				return "black";
			if(d.x>="92" && d.x<="100")
				return "red";
			else
				return "blue";
		});

	console.log(circles);
}




//other display option with handling mismatach condition of data declared and element passed


var svg = d3.select("svg");

function run(){

	var svg=d3.select("svg");
	var selection=svg.selectAll("rect")
		.data([127,61,256,71]);

	/* either writing this or below */
	
	/*
		selection
		.attr("x",0)
		.attr("y", function(d,i){ return i*30 + 30 })
		.attr("width",function(d,i){return d;})
		.attr("height",20)
		.style("fill","steelblue");

	//element that are not been mapped due to size constraint are mapped using .enter()

	selection.enter().append("rect")
		.attr("x",0)
		.attr("y",function(d,i) { return i*30 + 30})
		.attr("width",function(d,i){return d;})
		.attr("height",20)
		.style("fill","steelblue");


	*/

	/* alternative waya of writing above code */


	//first append then update....will lead to shorter codes
	selection.enter().append("rect");

	selection
		.attr("x",0)
		.attr("y",function(d,i){ return i*30 + 30})
		.attr("width",function(d,i){ return d;})
		.attr("height",20)
		.style("fill","steelblue");


	// that's all for when elements are greater than data ...what for vice -versa  
	//In such case we use .exit() to trim 

	//explicitly we could do via use of .exit() ...else it is implicitly done by the browser so no much need for that
	
	selection
		.attr("x",0)
		.attr("y",function(d,i){ return i*30 + 30})
		.attr("width",function(d,i){ return d;})
		.attr("height",20)
		.style("fill","steelblue");
		
	selection.exit().remove();
	


	
}


